/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Sales;

import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.ProductManagement.Product;

/**
 *
 * @author AnjanaSruthiR
 */
public class PriceAdjustJPanel extends javax.swing.JPanel {

    private JPanel userWorkArea;
    public Map<String, Product> products;
    public Map<String, Integer> initialPrices; 

    /**
     * Creates new form PriceAdjustJPanel
     */
    public PriceAdjustJPanel(JPanel userWorkArea, Map<String, Product> products, Map<String, Integer> initialPrices) {
        initComponents();
        this.userWorkArea = userWorkArea;
        this.products = products;
        this.initialPrices = new HashMap<>();
        
        for (Map.Entry<String, Product> entry : products.entrySet()) {
        initialPrices.putIfAbsent(entry.getKey(), entry.getValue().getTargetPrice());
        }
        
        populateTable();
    }
    

//    private void adjustPrices() {
//        for (Product product : productCatalog.getProductList()) {
//            if (product.getActualSales() > product.getTargetSales()) {
//                double newTargetPrice = product.getTargetPrice() * 1.1; // Increase by 10%
//                product.setTargetPrice((int) newTargetPrice);
//                JOptionPane.showMessageDialog(null, "Increased target price!", "Info", JOptionPane.INFORMATION_MESSAGE);
//            }
//        }
//        populateTable();
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        TblProducts = new javax.swing.JTable();
        BtnUpdate = new javax.swing.JButton();
        TxtUpdate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        TblProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Product Name", "Actual Sales", "Target Sales", "Target Price", "Floor Price", "Ceiling Price"
            }
        ));
        jScrollPane2.setViewportView(TblProducts);

        BtnUpdate.setText("Update the Target Price");
        BtnUpdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        BtnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnUpdateActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Adjust Target Price");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(416, 416, 416)
                        .addComponent(TxtUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(BtnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 847, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1070, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(86, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TxtUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(277, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {BtnUpdate, TxtUpdate});

    }// </editor-fold>//GEN-END:initComponents

    private void BtnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnUpdateActionPerformed

        int selectedRowIndex = TblProducts.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a product first!", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Product selectedProduct = (Product) TblProducts.getValueAt(selectedRowIndex, 0);

        int updatedPrice;
        try {
            updatedPrice = Integer.parseInt(TxtUpdate.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number for the target price!", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (selectedProduct.getActualSales() > selectedProduct.getTargetSales()) {
            // High-performing product conditions
            if (updatedPrice <= selectedProduct.getTargetPrice()) {
                JOptionPane.showMessageDialog(this, "For high-performing products, enter a higher target price!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (updatedPrice > selectedProduct.getCeilingPrice()) {
                JOptionPane.showMessageDialog(this, "Target price cannot exceed the ceiling price!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }
        } else if (selectedProduct.getActualSales() < selectedProduct.getTargetSales()) {
            // Low-performing product conditions
            if (updatedPrice >= selectedProduct.getTargetPrice()) {
                JOptionPane.showMessageDialog(this, "For low-performing products, enter a lower target price!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (updatedPrice < selectedProduct.getFloorPrice()) {
                JOptionPane.showMessageDialog(this, "Target price cannot be lower than the floor price!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (updatedPrice > selectedProduct.getCeilingPrice()) {
                JOptionPane.showMessageDialog(this, "Target price cannot exceed the ceiling price!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        selectedProduct.setTargetPrice(updatedPrice);
        JOptionPane.showMessageDialog(this, "Target price updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

        populateTable();
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnUpdateActionPerformed

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) TblProducts.getModel();
        model.setRowCount(0); // Clear existing rows

        for (Product product : products.values()) {
            Object[] row = new Object[6];
            row[0] = product;
            row[1] = product.getActualSales();
            row[2] = product.getTargetSales();
            row[3] = product.getTargetPrice();
            row[4] = product.getFloorPrice();
            row[5] = product.getCeilingPrice();
            model.addRow(row);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnUpdate;
    private javax.swing.JTable TblProducts;
    private javax.swing.JTextField TxtUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
